$date
	Tue Oct 17 22:09:10 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module A6test $end
$var wire 8 ! o1 [7:0] $end
$var wire 8 " o2 [7:0] $end
$var wire 8 # o3 [7:0] $end
$var wire 8 $ o4 [7:0] $end
$var wire 8 % o5 [7:0] $end
$var reg 1 & clk $end
$var integer 32 ' i [31:0] $end
$var reg 8 ( i1 [7:0] $end
$var reg 8 ) i2 [7:0] $end
$var reg 8 * i3 [7:0] $end
$var reg 8 + i4 [7:0] $end
$var reg 8 , i5 [7:0] $end
$var reg 8 - rand [7:0] $end
$scope module M1 $end
$var wire 1 . clk $end
$var wire 8 / i1 [7:0] $end
$var wire 8 0 i3 [7:0] $end
$var wire 8 1 i4 [7:0] $end
$var wire 8 2 i5 [7:0] $end
$var reg 8 3 o1 [7:0] $end
$scope module M3 $end
$var wire 1 . clk $end
$var wire 8 4 i2 [7:0] $end
$var reg 8 5 o2 [7:0] $end
$var reg 8 6 o3 [7:0] $end
$var reg 8 7 o4 [7:0] $end
$var reg 8 8 o5 [7:0] $end
$upscope $end
$upscope $end
$scope module M2 $end
$var wire 1 . clk $end
$var wire 8 9 i2 [7:0] $end
$var reg 8 : o2 [7:0] $end
$var reg 8 ; o3 [7:0] $end
$var reg 8 < o4 [7:0] $end
$var reg 8 = o5 [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
0.
b100 -
bx ,
bx +
bx *
bx )
bx (
b1 '
0&
bx %
bx $
bx #
bx "
bx !
$end
#4
b1101 8
b1 7
b10010 6
b1100101 5
b10001101 3
b10001101 !
b10001101 4
b1101 =
b1101 %
b1100011 <
b1100011 $
b1001 ;
b1001 #
b10000001 :
b10000001 "
1&
1.
#8
b110 -
b10 '
b1101 ,
b1101 2
b1100011 +
b0xx000x1 1
b1001 *
b0xx0xx 0
b10001101 )
b10001101 9
b10000001 (
bx00x01 /
0&
0.
#14
b1110111 =
b1110111 %
b11100101 <
b11100101 $
b10101010 ;
b10101010 #
b11000101 :
b11000101 "
b11000110 3
b11000110 !
b11000110 4
b11111001 8
bx1x01 2
b10001100 7
bx0xxxx 1
b11101101 6
bx01x01 0
b111101 5
bx0xxxx01 /
1&
1.
#20
b10 -
b11 '
b1110111 ,
bx111xxx1 2
b11100101 +
b1xx0x10x 1
b10101010 *
b1x101xxx 0
b11000110 )
b11000110 9
b11000101 (
bx101 /
0&
0.
#22
b1100101 8
b11x01x1 2
b101101 7
bx10x101 1
b10111101 6
b101x1xxx 0
b1011100 5
bx10xx10x /
b11000101 3
b11000101 !
b11000101 4
b11101000 =
b11101000 %
b11001110 <
b11001110 $
b11110010 ;
b11110010 #
b10001111 :
b10001111 "
1&
1.
#24
b11 -
b100 '
b11101000 ,
bx110xx0x 2
b11001110 +
bx011xx 1
b11110010 *
b1x11xxxx 0
b11000101 )
b11000101 9
b10001111 (
bx0x11xx /
0&
0.
#27
b1010011 =
b1010011 %
b1101 <
b1101 $
b10011 ;
b10011 #
b10010110 :
b10010110 "
b10011101 3
b10011101 !
b10011101 4
b10101010 8
b1x1010x0 2
b100000 7
bx0xxx0 1
b10000000 6
b1xxx00x0 0
b1010 5
bx0001x1x /
1&
1.
#30
b1011 -
b101 '
b1010011 ,
bx01x 2
b1101 +
b0x0xx0x 1
b10011 *
bx00x00xx 0
b10011101 )
b10011101 9
b10010110 (
bx00xxx10 /
0&
0.
#41
b111100 8
b0xx1xxxx 2
b11001010 7
bx001xxx 1
b1010 6
b0xx01x 0
b100011 5
bx0xx0x1x /
b11001111 3
b11001111 !
b11001111 4
b11101 =
b11101 %
b10101110 <
b10101110 $
b10 ;
b10 #
b11010101 :
b11010101 "
1&
1.
#52
b10 -
b110 '
b11101 ,
b0x1110x 2
b10101110 +
b1xx01x10 1
b10 *
b0x010 0
b11001111 )
b11001111 9
b11010101 (
bx0xx1 /
0&
0.
#54
b10101110 =
b10101110 %
b11000110 <
b11000110 $
b10110110 ;
b10110110 #
b11101011 :
b11101011 "
b10001001 3
b10001001 !
b10001001 4
b1111000 8
b0xx11x0x 2
b11011000 7
b1xxx1xx0 1
b1000001 6
b0x0000xx 0
b10001010 5
b1x0xxxxx /
1&
1.
#56
b1100 -
b111 '
b10101110 ,
bx1x1xx0 2
b11000110 +
b110xxxx0 1
b10110110 *
bx0xxx 0
b10001001 )
b10001001 9
b11101011 (
b1xx0101x /
0&
0.
#68
b10101 8
bx0xxx1xx 2
b1111110 7
bx1xxx110 1
b111010 6
bx011xx10 0
b111011 5
bx1x1011 /
b1001111 3
b1001111 !
b1001111 4
b10000101 =
b10000101 %
b1110001 <
b1110001 $
b1011 ;
b1011 #
b101010 :
b101010 "
1&
1.
#80
b1 -
b1000 '
b10000101 ,
bx00x0101 2
b1110001 +
b111xxxx 1
b1011 *
b0xx101x 0
b1001111 )
b1001111 9
b101010 (
b1x101x /
0&
0.
#81
b1011100 =
b1011100 %
b10011111 <
b10011111 $
b10110111 ;
b10110111 #
b11111000 :
b11111000 "
b10001111 3
b10001111 !
b10001111 4
b10011111 8
b100xx1x1 2
b1001100 7
b1xxxx0x 1
b1100010 6
b0xx0x01x 0
b11011001 5
bx10xx /
1&
1.
#82
b1011 -
b1001 '
b1011100 ,
bx0111xx 2
b10011111 +
bx0x11xx 1
b10110111 *
bx1x0x1x 0
b10001111 )
b10001111 9
b11111000 (
b11x1100x /
0&
0.
#93
b11001000 8
bx10x1x00 2
b11000010 7
b1x0xxx1x 1
b1100 6
bx0xxx1xx 0
b10010110 5
b1xx1xxx0 /
b1010001 3
b1010001 !
b1010001 4
b11010111 =
b11010111 %
b11010000 <
b11010000 $
b1001001 ;
b1001001 #
b10001001 :
b10001001 "
1&
1.
#104
b1010 '
b11010111 ,
b110xxxxx 2
b11010000 +
b110x00x0 1
b1001001 *
b0x001x0x 0
b1010001 )
b1010001 9
b10001001 (
b100xxxxx /
0&
0.
